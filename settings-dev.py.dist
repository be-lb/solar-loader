#########################################################################
#  Copyright (C) 2017 Atelier Cartographique <contact@atelier-cartographique.be>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, version 3 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#########################################################################
"""
Django settings for sdi_api project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'pf1&!nhd&i4p=r%aa@m!1r#r^6v*nddddhkhg6a22mj@o8j+-ty'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

CORS_ORIGIN_ALLOW_ALL = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    # 'layers',
    'api',
    # 'documents',
    #        'timeserie',
    #         'catalog',
    #      'webservice',
    #                      'remote_manage',
    # 'render',
    #       'rest_framework',
    #                                'rest_framework_gis',
    #                                   'corsheaders',
    #                                      'rules.apps.AutodiscoverRulesConfig',
    ]

AUTHENTICATION_BACKENDS = (
    'rules.permissions.ObjectPermissionBackend',
    'django.contrib.auth.backends.ModelBackend',
)

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'main/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'


DATABASES = dict()

DATABASES['default'] = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': 'postgres',
    'PASSWORD': 'postgres',
    'USER': 'postgres',
}

# acces db
LAYERS_DB = {
    'ENGINE': 'django.contrib.gis.db.backends.postgis',
    'HOST': '0.0.0.0',
    'PORT': 5435,
    'NAME': 'postgres',
    'PASSWORD': 'postgres',
    'USER': 'postgres',
}

LAYERS_SCHEMAS = [
    'solar',
]

for schema in LAYERS_SCHEMAS:
    db_config = LAYERS_DB.copy()
    db_config.update({
        'OPTIONS': {
            'options': '-c search_path={},public'.format(schema),
        },
    })
    DATABASES[schema] = db_config

# dossier ou installer les clients
CLIENTS_ROOT = '/var/solar/sdi-clients'

# la ou upload vont
MEDIA_ROOT = '/var/solar/sdi-media'
MAX_DECIMAL_DIGITS = 2

# declaration d un groupe public et un interne
DEFAULT_GROUP = 'sdi:geodata'
PUBLIC_GROUP = 'sdi:public'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/solar/sdi-cache',
        'OPTIONS': {
            'MAX_ENTRIES': 200000
        }
    },
    'layers': { # au moin avoir celui la
        'BACKEND': 'diskcache.DjangoCache',
        'LOCATION': '/var/solar/layers-cache',
        'TIMEOUT': 60 * 60 * 24,
        'SHARDS': 4,
        'DATABASE_TIMEOUT': 1.0,
        'OPTIONS': {
            'size_limit': 2**32  # 4 gigabytes
        }
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file-solar': {
            'class': 'logging.FileHandler',
            'filename': '/var/solar/logs/logs.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
        'api': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'solar_loader': {
            'handlers': ['file-solar'],
            'level': 'DEBUG',
        },
    },
}

# on s'en fiche - pour catalogue
CSW_CONFIG_MAIN = {
    'identification_title': 'GeoNode Catalogue',
    'identification_abstract': 'GeoNode is an open source platform' \
    ' that facilitates the creation, sharing, and collaborative use' \
    ' of geospatial data',
    'identification_keywords': 'sdi, catalogue, discovery, metadata,' \
    ' GeoNode',
    'identification_keywords_type': 'theme',
    'identification_fees': 'None',
    'identification_accessconstraints': 'None',
    'provider_name': 'Organization Name',
    'provider_url': 'https://geodata.environnement.brussels',
    'contact_name': 'Lastname, Firstname',
    'contact_position': 'Position Title',
    'contact_address': 'Mailing Address',
    'contact_city': 'City',
    'contact_stateorprovince': 'Administrative Area',
    'contact_postalcode': 'Zip or Postal Code',
    'contact_country': 'Country',
    'contact_phone': '+xx-xxx-xxx-xxxx',
    'contact_fax': '+xx-xxx-xxx-xxxx',
    'contact_email': 'Email Address',
    'contact_url': 'Contact URL',
    'contact_hours': 'Hours of Service',
    'contact_instructions': 'During hours of service. Off on ' \
    'weekends.',
    'contact_role': 'pointOfContact',
}
CSW_CONFIG_INSPIRE = {
    'enabled': 'true',
    'languages_supported': 'eng,gre',
    'default_language': 'eng',
    'date': 'YYYY-MM-DD',
    'gemet_keywords': 'Utility and governmental services',
    'conformity_service': 'notEvaluated',
    'contact_name': 'Organization Name',
    'contact_email': 'Email Address',
    'temp_extent': 'YYYY-MM-DD/YYYY-MM-DD',
}

# avoir postgis_load et solar_solar
INSTALLED_APPS.append('solar_loader')

# settings pour solar loaded

DATABASES['solar1'] = {
    'ENGINE': 'django.contrib.gis.db.backends.postgis',
    'HOST': '192.168.0.4',
    'PORT': 5432,
    'NAME': 'postgres',
    'PASSWORD': 'postgres',
    'USER': 'postgres',
    'OPTIONS': {
        'options': '-c search_path=solar,public',
    },
}

DATABASES['solar2'] = {
    'ENGINE': 'django.contrib.gis.db.backends.postgis',
    'HOST': '192.168.0.11',
    'PORT': 5432,
    'NAME': 'postgres',
    'PASSWORD': 'postgres',
    'USER': 'postgres',
    'OPTIONS': {
        'options': '-c search_path=solar,public',
    },
}

DATABASES['solar3'] = {
    'ENGINE': 'django.contrib.gis.db.backends.postgis',
    'HOST': '192.168.0.6',
    'PORT': 5432,
    'NAME': 'postgres',
    'PASSWORD': 'postgres',
    'USER': 'postgres',
    'OPTIONS': {
        'options': '-c search_path=solar,public',
    },
}


DATABASES['solar4'] = {
    'ENGINE': 'django.contrib.gis.db.backends.postgis',
    'HOST': '192.168.0.12',
    'PORT': 5432,
    'NAME': 'postgres',
    'PASSWORD': 'postgres',
    'USER': 'postgres',
    'OPTIONS': {
        'options': '-c search_path=solar,public',
    },
}


SOLAR_CONNECTION = ['solar1', 'solar2', 'solar3', 'solar4']
# SOLAR_CONNECTION = 'solar_atelier_carto'

SOLAR_TABLES = {
    "ground": {
        "table": "solar.cadastre",
        "geometry": "geom",
        "capakey": "capakey",
    },
    "roof": {  # roof avec centroid de pent de toiture
        "table": "solar.roof",
        "geometry": "geom",
        "centroid": "flat_pos"
    },
    "solid": {  # table des solides pour calculer les ombres ( seulement les valides)
        "table": "solar.solid",
        "geometry": "geom"
    },
    "results": {
        "table": "result_ex",
        "irradiance": "irradiance",
        "roof_id": "roof_id",
    }
}


SOLAR_WKT_FROM_DB = True

SOLAR_TMY = "/var/solar/tmy/Bruxelles_centre-hour.csv"

# interval tous les 30 jours
SOLAR_SAMPLE_RATE = 14

SOLAR_SIMULATOR_SETTINGS = {
    "MAX_POWER": 12,
    "TYPOLOGY_RATE": {
        "closed": 0.2,
        "detached": 0.2,
        "half-open": 0.2,
        "apartments": 0.2,
        "administrative": 0.2,
        "collective": 0.2,
        "industrial": 0.2,
    }
}


DATABASES['results'] = {
    'ENGINE': 'django.contrib.gis.db.backends.postgis',
    'HOST': 'X.X.X.X',
    'PORT': 5432,
    'NAME': 'postgres',
    'PASSWORD': 'postgres',
    'USER': 'postgres',
    'OPTIONS': {
        'options': '-c search_path=solar,public',
    },
}


SOLAR_CONNECTION_RESULTS = 'results'
